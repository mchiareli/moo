
// Mixins for column width calculation.
@mixin column-width($width, $columns, $padding:0px,$margin:0px) {
  width: calc(#{(($width / $columns) * 100)+"%"} - ( #{$padding} + #{$margin} ));
  .#{$namespace}-grid--no-space > & {
    width: #{(($width / $columns) * 100)+"%"};
  }
}

@mixin offset-size($size, $columns, $margin:0px) {
  margin-left: calc(#{(($size / $columns) * 100)+"%"} + #{$margin} );
  .#{$namespace}-grid.#{$namespace}-grid--no-space > & {
    margin-left: #{(($size / $columns) * 100)+"%"};
  }
}

@mixin full($padding:0px,$margin:0px) {
  @include column-width(1, 1, $padding,$margin);
}

// CSS definitions for grid
.#{$namespace}-grid {
  display: flex;
  flex-wrap: wrap;
}

.#{$namespace}-grid {
  padding: $grid-phone-padding;
  &--no-space {
    padding: 0;
  }
}

.#{$namespace}-grid {
  justify-content: flex-start;
  &--left{
    justify-content: flex-start;
  }
  &--center{
    justify-content: center;
  }
  &--right{
    justify-content: flex-end;
  }
}

// CSS definitions for cells
.#{$namespace}-cell {
    margin: $grid-phone-margin;
    box-sizing: border-box;
}

.#{$namespace}-grid--no-space > .#{$namespace}-cell {
  margin: 0;
}

// CSS definitions mobile. (default)
@for $i from 1 through ($grid-phone-columns) {
  .#{$namespace}-cell--#{$i}-col,
  .#{$namespace}-cell--#{$i}-col-phone.#{$namespace}-cell--#{$i}-col-phone {
    @include column-width($i, $grid-phone-columns, $grid-phone-padding,$grid-phone-margin);
  }
}

// phone has 4 cells, more than that will be set as 100%.
@for $i from ($grid-phone-columns + 1) through $grid-desktop-columns {
  .#{$namespace}-cell--#{$i}-col,
  .#{$namespace}-cell--#{$i}-col-phone.#{$namespace}-cell--#{$i}-col-phone {
    @include full($grid-phone-padding,$grid-phone-margin);
  }
}

@for $i from 1 through ($grid-phone-columns - 1) {
  .#{$namespace}-cell--#{$i}-offset,
  .#{$namespace}-cell--#{$i}-offset-phone.#{$namespace}-cell--#{$i}-offset-phone {
    @include offset-size($i, $grid-phone-columns,$grid-phone-margin);
  }
}

@include tablet {
  @for $i from 1 through ($grid-tablet-columns) {
    .#{$namespace}-cell--#{$i}-col,
    .#{$namespace}-cell--#{$i}-col-tablet.#{$namespace}-cell--#{$i}-col-tablet {
      @include column-width($i, $grid-tablet-columns, $grid-tablet-padding,$grid-tablet-margin);
    }
  }
  // tablet has 8 cells, more than that will be set as 100%.
  @for $i from ($grid-tablet-columns + 1) through $grid-desktop-columns {
    .#{$namespace}-cell--#{$i}-col,
    .#{$namespace}-cell--#{$i}-col-tablet.#{$namespace}-cell--#{$i}-col-tablet {
      @include full($grid-tablet-padding,$grid-tablet-margin);
    }
  }
  @for $i from 1 through ($grid-phone-columns - 1) {
    .#{$namespace}-cell--#{$i}-offset,
    .#{$namespace}-cell--#{$i}-offset-tablet.#{$namespace}-cell--#{$i}-offset-tablet {
      @include offset-size($i, $grid-tablet-columns,$grid-tablet-margin);
    }
  }
};

@include desktop {
  @for $i from 1 through ($grid-desktop-columns) {
    .#{$namespace}-cell--#{$i}-col,
    .#{$namespace}-cell--#{$i}-col-desktop.#{$namespace}-cell--#{$i}-col-desktop {
      @include column-width($i, $grid-desktop-columns, $grid-desktop-padding,$grid-desktop-margin);
    }
  }
  @for $i from 1 through ($grid-desktop-columns - 1) {
    .#{$namespace}-cell--#{$i}-offset,
    .#{$namespace}-cell--#{$i}-offset-desktop.#{$namespace}-cell--#{$i}-offset-desktop {
      @include offset-size($i, $grid-desktop-columns,$grid-desktop-margin);
    }
  }
};
